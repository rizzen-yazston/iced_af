= {iced} Application Framework
Rizzen Yazston
:iced-url: https://crates.io/crates/iced
:iced_aw-url: https://crates.io/crates/iced_aw
:i18n-url: https://crates.io/crates/i18n-rizzen-yazston
:icu-url: https://crates.io/crates/icu
:icu4x-url: https://icu4x.unicode.org/
:iced: pass:q[*iced*]

Welcome to the *{iced} Application Framework* project.

The goal is to provide a starting application framework for developing native multi-window {iced} applications.

This project uses the {iced-url}[{iced}] library crates (including {iced_aw-url}[*iced_aw*] community crate for additional widgets) for the GUI of the application.

NOTE:: Currently the `menu` feature of the `iced_aw` crate's `update` branch does not work with the `master` branch of `iced`. For the interim a simple fake menu bar is implemented in `menu_bar.rs`. Excuse the blocks of comments and individual comments scattered, leaving the commented code as a reminded to fix once `iced_aw` is stable and `menu` feature is fixed.

In addition, the framework supports internationalisation as a feature option by using the crate {i18n-url}[*i18n-rizzen-yazston*] and various crates of the {icu4x-url}[*ICU4X*] project, the main crate being {icu-url}[*icu*].

To support various applications, all the application's feature capabilities are gated with build feature options (see Features section).

== Features

The following features are available:

* `log`: To enable logging for the application, and inserts a log level setting in Preferences window,

* `sync`: To use `sync::Arc` instead of `rc::Rc`, their respective variants.

* `i18n`: To enable international support. The design allows for all scripts, though currently only supports top to down scripts, due to `icu` currently only has flow direction information for top to bottom scripts (with plans to expand to all scripts). Uses the latest `i18n` version 0.8.0, that added new features.

* `persistent`: Specifies whether session data will be saved on exit, and restored at application launch. This feature is required if wanting applications settings to be persistent across usage.

* `first_use`: To enable the simplified Preferences window to appear first on first time use to allow user to set specific preferences settings, before opening the application's main window. This feature automatically enables the `persistent` feature.

* `clap`: Enabled command line support, for applications that like to have the ability to pass options/command/etc to the application. Note version used is 4.4.3, as 4.5 requires rustc version 0.74.

== What is included

The application framework has the following capabilities:

* First time use of application, the Preferences window will be displayed prompting the user to select the user interface language (currently using language tags while waiting for *display name* feature to be completed in ICU4X),

* The following windows:

** `ConfirmExit`: for demonstration purposes application is set to displayed when exiting (faking unsaved data),

** `Preferences`: contains the user interface language setting, and optional log level setting,

** `FatalError`: for displaying fatal error messages to users (helpful when not launched from console),

** `Information`: a simple generic window to display a message to user,

** `Main`: simply contains a menu bar,

** `About`: simply demonstration of an about window.

* Parent windows are generally disabled while popup window is displayed,

* Traps the window decoration close button, to handle certain state cases,

* Windows are resizable and movable, and if build with `persistent` feature their final position and size is saved on application termination and restored when application is relaunched.

* Supports handling of error `Result`s internally of the `update()` method and the 'Application::new()' method, using FatalError window to display uncaught errors.

* Localisation of text and errors that supports internationalisation. Two demonstration languages included for almost all text. Deliberately the text displayed in Main window does not support localisation for demonstration purposes.

== Usage

NOTE:: There are no build scripts included, and data files need to be copied to target destination.

As this project is a starting point for developing multi-windowed {iced} applications, it can be compiled into a functional example, and be launched by using the application name `example`.

Before launching the `example` copy the `l10n` directory to where the directory where the binary resides to avoid a panic indicating missing localisation database.

Edit the `lib.rs` in the project's root, to configure various application's `const`s to reflect the new project.

As this is a mini application framework for creating multi-window applications, feel free to remove unwanted features, easy to spot with `#[cfg(...)]` statements and deleted the associated statement/expression. Or alternative leave the features as is and continue using the feature `#[cfg(...)]` statements for new windows and new components of existing windows, to allow easy switching to more advance features later on (such as international support, or suddenly requiring command line options).

== Notes

* The major version number will always match the major version number of {iced} being used.

* Once the `menu` feature of *iced_aw* crate is ready, the framework will be updated.

* Formatting of error message for localisation is still to be implemented.

* This still work in progress, thus the windows may look a bit wonky. Currently focused on functionality than appearances.

* Currently works with `master` branch of {iced} using commit `545cc90`.

== Adding a new windows

* In `src/window` directory pick a window that closely fits your new window layout structure, copy rust file with a new filename.

* Make the required changes in the new window `.rs` file:

** Such as renaming `???Localisation` struct, `???` struct, and `display_???` function, where *???* is the window abbreviation name. Adjust the content of these as required.

** If required add a `???Message` enum, and `update_???` function, where *???* is internal window abbreviation name. See existing `preferences.rs` for an example.

** Alter the contents of `try_new()`, `try_update()` and `view()`, and optionally adjust `parent_remove()`.

* In `window.rs` add the new filename.

* In `core/session.rs` add entry for the window in `Ui` struct.

* In `core/application`:

** To `use crate::{ ... window::{` statement add the new window filename.

** To `WindowType` add a new entry for the new window.

** If new window has its own `Message` enum, add it to `ApplicationMessage` enum, to be able to pass messages to the new window's `try_update()` method.

** To `try_update()` method, add match branch for new window, either directly to window's `try_update()` method, or if needing to do more logic outside of window's `try_update()` method, can in the new window's rust file add a `update_?` function, where ? is the window abbreviation. See other branches for examples.

** To `resized()` and `moved()` methods add entries for the new window.

* If new window is accessible from the application's menu bar then add entry in `window/main/menu_bar.rs` and add match branch to `update_main()` function to handle the displaying of the new window.

== Design process

Currently just a copy from {iced}'s' Discord server discussion. Still to be cleaned up.

i will add the design principles once iced is released as 0.12.0, which will bring some stability to iced_af.

the i18n library almost all the methods uses the Result type to be able to provide runtime errors that are catchable, where the developer of the application (or another library) can decide to ignore the error, display the error, or leave it uncaught to become a fatal error. this is intentional, thus i inserted a try_update() method within the update() and if an uncaught error reaches this point, simply display the FatalError window, which displays the error message (handy when application is not launched from console) , also prints to console (if used), and if logging is enabled to write to the log.

you will notice there is no try_view() method in view(), this is due to that no errors must occur within view(). to overcome this issue of obtaining localisation strings, that may produce errors, especially if identifiers are missing, the localisation strings are retrieved at the time of the window state is created (as the new() method also includes the try_new() method, and errors are caught to be displayed with FatalError window), or during the update() method.

A note about FatalError, which is a special case, it will not produce fatal errors as a result of missing identifiers, or any other i18n error. it will then use the few built-in english strings and using the Debug and/or Display traits of types to be able to display the error on GUI, console, and to log if available.
you will notice the multi-window example (which I started with) the windows was all the same. originally i used a field to specify the window type, to determine which content to display. yet the view() started becoming unyielding large with the match statement, thus decided to break up the view() into window specific view()s, but still had to maintain the basic match. same went with the try_update(). to resolve this i introduced the WindowType and WindowTrait (along with the AnyWindowTrait to be able to downcast from Any), and the resulting primary application view() became a simple generic method, that was capable of displaying any window type, or number of the same window. not currently seen in iced_af is multi of the same window, that is simply done by using enum variant including an integer (such as usize) or a String to identifier which window to display. the logic of determining which one will be in the logic of the window type's view().

a note on the messages being sent by the windows, or components of the windows, such as can be seen with Main window, it is important to include the window::Id in the message enum variant, when ever you are going to manipulate the iced window state, such as closing the window. once iced_aw has been updated, it will become more clear how to build windows from components, where each component would be in it's own file, containing their own Message, view() and try_update(). i believe the view, message, update, state, etc of a large component should always be kept together for easier maintenance of the code base, and using more generic methods at the core/parent methods to call the children. currently i am using a simple hack to create a "menu bar". menu of iced_aw is my next task to tackle, as it is a complex beast, with plenty breaking changes coming lately from iced that affects it. like to get menu done by the time iced 0.12.0 is released.
